Git Commands in Lesson 1:
git diff [commit ID 1] [commit ID 2]
	- git diff: first argument is the 'original' and second is the modify/new version
git log
git clone [repository URL]
git checkout [commit ID]

Git COmmands in Lesson 2:
git init # initializes a repository
git status # shows whats happened in the repository
git add [file] # puts the files into the staging area
** to check files between working directory and staging area, use....
  >> git diff # no arguments...any changes I've made before adding to staging area
git diff --staged # comparison between staging area and repository!
git branch : shows current branches
git branch [name]: creates a new branch with that name
ie:
$ git branch easy-mode
$ git branch
>> easy-mode
   * master
   #this means the master is checked out and any changes affects master
$ git checkout easy-mode # this changes master to easy-mode
$ git checkout -b new_branch_name is equivalent to:
     $ git branch new_branch_name
     $ git checkout new_branch_name

$ git merge [file1] [file2]
$ git show [fileID] # shows what changes (diff) were introduced by the commit compared to its parent
$ git branch -d [branchID] # this deletes the label. Use this only after you've merged the changes back into master and you no longer need the branch.

Lesson 3: GIT and GITHUB
git remote
git remote add origin git@github.com:nocturnalpea/reflections.git
 ** 
git push origin master # this effectively 'pushes' the local repository "master", to the 'origin', tagged with remote URL link
git pull origin master # effectively pulls the contents from origin to the local repository 'master'


Linux Commands:
ls -a # this lists all files (including hidden) in the directory





How did viewing a diff between two versions of a file you see the bug that was introduced?

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

How can you use the commands git log and git diff to view the history of files?

How might using version control make you more confident to make changes that could break something?

Now that you have your workspace set up, what do you want to try using Git for?

What happens when you initialize a repository? Why do you need to do it?